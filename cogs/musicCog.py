import discord
from discord.ext import commands
import random
import asyncio
import itertools
import sys
import traceback
from async_timeout import timeout
from functools import partial
import youtube_dl
from youtube_dl import YoutubeDL

# Suppress noise about console usage from errors
youtube_dl.utils.bug_reports_message = lambda: ''

ytdlopts = {
    'format': 'bestaudio/best',
    'outtmpl': 'downloads/%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'  # ipv6 addresses cause issues sometimes
}

ffmpegopts = {
    'before_options': '-nostdin',
    'options': '-vn'
}

ytdl = YoutubeDL(ytdlopts)


class VoiceConnectionError(commands.CommandError):
    """Custom Exception class for connection errors."""


class InvalidVoiceChannel(VoiceConnectionError):
    """Exception for cases of invalid Voice Channels."""


class YTDLSource(discord.PCMVolumeTransformer):

    def __init__(self, source, *, data, requester):
        super().__init__(source)
        self.requester = requester

        self.title = data.get('title')
        self.web_url = data.get('webpage_url')
        self.duration = data.get('duration')


    def __getitem__(self, item: str):
        """Allows us to access attributes similar to a dict.
                This is only useful when you are NOT downloading.
                """
        """Cho ph√©p ch√∫ng t√¥i truy c·∫≠p c√°c thu·ªôc t√≠nh t∆∞∆°ng t·ª± nh∆∞ m·ªôt dict.
            ƒêi·ªÅu n√†y ch·ªâ h·ªØu √≠ch khi b·∫°n KH√îNG t·∫£i xu·ªëng.
        """
        return self.__getattribute__(item)

    @classmethod
    async def create_source(cls, ctx, search: str, *, loop, download=False):
        loop = loop or asyncio.get_event_loop()

        to_run = partial(ytdl.extract_info, url=search, download=download)
        data = await loop.run_in_executor(None, to_run)

        if 'entries' in data:
            # take first item from a playlist
            data = data['entries'][0]

        embed = discord.Embed(title="",
                              description=f"[{data['title']}]({data['webpage_url']})",
                              color=discord.Color.green())
        embed = embed.set_author(name=f"{ctx.author.display_name} ƒë√£ th√™m 1 b√†i h√°t",icon_url=ctx.author.avatar_url)
        await ctx.send(embed=embed)

        if download:
            source = ytdl.prepare_filename(data)
        else:
            return {'webpage_url': data['webpage_url'], 'requester': ctx.author, 'title': data['title']}

        return cls(discord.FFmpegPCMAudio(source), data=data, requester=ctx.author)

    @classmethod
    async def regather_stream(cls, data, *, loop):
        """Used for preparing a stream, instead of downloading.
        Since Youtube Streaming links expire."""
        """ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ chu·∫©n b·ªã m·ªôt lu·ªìng, thay v√¨ t·∫£i xu·ªëng.
        K·ªÉ t·ª´ khi li√™n k·∫øt ph√°t tr·ª±c tuy·∫øn tr√™n Youtube h·∫øt h·∫°n."""
        loop = loop or asyncio.get_event_loop()
        requester = data['requester']

        to_run = partial(ytdl.extract_info, url=data['webpage_url'], download=False)
        data = await loop.run_in_executor(None, to_run)

        return cls(discord.FFmpegPCMAudio(data['url']), data=data, requester=requester)


class MusicPlayer:
    """A class which is assigned to each guild using the bot for Music.
    This class implements a queue and loop, which allows for different guilds to listen to different playlists
    simultaneously.
    When the bot disconnects from the Voice it's instance will be destroyed.
    """

    __slots__ = ('bot', '_guild', '_channel', '_cog', 'queue', 'next', 'current', 'np', 'volume')

    def __init__(self, ctx):
        self.bot = ctx.bot
        self._guild = ctx.guild
        self._channel = ctx.channel
        self._cog = ctx.cog

        self.queue = asyncio.Queue()
        self.next = asyncio.Event()

        self.np = None  # Now playing message
        self.volume = 1.0
        self.current = None

        ctx.bot.loop.create_task(self.player_loop())

    async def player_loop(self):
        """Our main player loop."""
        await self.bot.wait_until_ready()

        while not self.bot.is_closed():
            self.next.clear()

            try:
                # Wait for the next song. If we timeout cancel the player and disconnect...
                async with timeout(600):  # 5 minutes...
                    source = await self.queue.get()
            except asyncio.TimeoutError:
                return self.destroy(self._guild)

            if not isinstance(source, YTDLSource):
                # Source was probably a stream (not downloaded)
                # So we should regather to prevent stream expiration
                try:
                    source = await YTDLSource.regather_stream(source, loop=self.bot.loop)
                except Exception as e:
                    await self._channel.send(f'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω b√†i h√°t.\n'
                                             f'```css\n[{e}]\n```')
                    continue

            source.volume = self.volume
            self.current = source

            self._guild.voice_client.play(source, after=lambda _: self.bot.loop.call_soon_threadsafe(self.next.set))
            embed = discord.Embed(title="ƒêang ph√°t",
                                  description=f"[{source.title}]({source.web_url})",
                                  color=discord.Color.green())
            embed = embed.set_footer(text=f'Requested by {source.requester.display_name}',icon_url=source.requester.avatar_url)
            self.np = await self._channel.send(embed=embed)
            await self.next.wait()

            # Make sure the FFmpeg process is cleaned up.
            source.cleanup()
            self.current = None

    def destroy(self, guild):
        """Disconnect and cleanup the player."""
        return self.bot.loop.create_task(self._cog.cleanup(guild))


class Music(commands.Cog):
    """Music related commands."""

    __slots__ = ('bot', 'players')

    def __init__(self, bot):
        self.bot = bot
        self.players = {}

    async def cleanup(self, guild):
        try:
            await guild.voice_client.disconnect()
        except AttributeError:
            pass

        try:
            del self.players[guild.id]
        except KeyError:
            pass

    async def __local_check(self, ctx):
        """A local check which applies to all commands in this cog."""
        if not ctx.guild:
            raise commands.NoPrivateMessage
        return True

    async def __error(self, ctx, error):
        """A local error handler for all errors arising from commands in this cog."""
        if isinstance(error, commands.NoPrivateMessage):
            try:
                return await ctx.send('Kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y trong TIN NH·∫ÆN RI√äNG')
            except discord.HTTPException:
                pass
        elif isinstance(error, InvalidVoiceChannel):
            await ctx.send('L·ªói k·∫øt n·ªëi ƒë·∫øn k√™nh tho·∫°i. '
                           'ƒê·∫£m b·∫£o r·∫±ng b·∫°n ƒëang ·ªü trong m·ªôt k√™nh h·ª£p l·ªá ho·∫∑c g√µ v√†o m·ªôt k√™nh')

        print('B·ªè qua ngo·∫°i l·ªá trong l·ªánh {}:'.format(ctx.command), file=sys.stderr)
        traceback.print_exception(type(error), error, error.__traceback__, file=sys.stderr)

    def get_player(self, ctx):
        """Retrieve the guild player, or generate one."""
        try:
            player = self.players[ctx.guild.id]
        except KeyError:
            player = MusicPlayer(ctx)
            self.players[ctx.guild.id] = player

        return player

    @commands.command(name='join', aliases=['connect', 'j'], description="K·∫øt n·ªëi v√†o k√™nh tho·∫°i.")
    async def connect_(self, ctx, *, channel: discord.VoiceChannel = None):
        """K·∫øt n·ªëi v√†o k√™nh tho·∫°i

        Th√¥ng s·ªë
        ------------
        <channel>: T√™n k√™nh tho·∫°i [T√πy ch·ªçn]
            The channel to connect to. If a channel is not specified, an attempt to join the voice channel you are in
            will be made.
            K√™nh ƒë·ªÉ tr√¨nh ph√°t k·∫øt n·ªëi. N·∫øu kh√¥ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, tr√¨nh ph√°t s·∫Ω tham gia v√†o k√™nh tho·∫°i m√† b·∫°n ƒëang tham gia.
        L·ªánh n√†y c√≥ th·ªÉ d√πng ƒë·ªÉ di chuy·ªÉn BOT sang c√°c k√™nh kh√°c nhau.
        """

        if not channel:
            try:
                channel = ctx.author.voice.channel
            except AttributeError:
                embed = discord.Embed(title="",
                                      description="Ch∆∞a ch·ªâ ƒë·ªãnh k√™nh. Vui l√≤ng g√µ `!join` t·ª´ k√™nh tho·∫°i.",
                                      color=discord.Color.green())
                await ctx.send(embed=embed)
                raise InvalidVoiceChannel('Ch∆∞a ch·ªâ ƒë·ªãnh k√™nh. Vui l√≤ng ch·ªâ ƒë·ªãnh ho·∫∑c tham gia k√™nh tho·∫°i.')

        vc = ctx.voice_client

        if vc:
            if vc.channel.id == channel.id:
                return
            try:
                await vc.move_to(channel)
            except asyncio.TimeoutError:
                raise VoiceConnectionError(f'Chuy·ªÉn sang k√™nh: <{channel}> (timed out).')
        else:
            try:
                await channel.connect()
            except asyncio.TimeoutError:
                raise VoiceConnectionError(f'K·∫øt n·ªëi t·ªõi k√™nh: <{channel}> (timed out).')
        if (random.randint(0, 1) == 0):
            await ctx.message.add_reaction('üëç')
        await ctx.send(f'**ƒê√£ k·∫øt n·ªëi `{channel}`**')

    @commands.command(name='play', aliases=['sing', 'p'], description="Ph√°t nh·∫°c ho·∫∑c th√™m v√†o h√†ng ch·ªù.")
    async def play_(self, ctx, *, search: str):
        """Ph√°t nh·∫°c ho·∫∑c th√™m v√†o h√†ng ch·ªù.
        L·ªánh n√†y s·∫Ω k·∫øt n·ªëi BOT v√†o m·ªôt k√™nh tho·∫°i h·ª£p l·ªá n·∫øu BOT ch∆∞a k·∫øt n·ªëi.
        S·ª≠ d·ª•ng YTDL ƒë·ªÉ t·ª± ƒë·ªông t√¨m ki·∫øm v√† truy xu·∫•t 1 b√†i h√°t.

        Th√¥ng s·ªë
        ------------
        <search>: str [b·∫Øt bu·ªôc]
            B√†i h√°t ƒë∆∞·ª£c t√¨m ki·∫øm v√† truy xu·∫•t b·∫±ng YTDL. ƒê√¢y c√≥ th·ªÉ l√† m·ªôt t√™n m·ªôt b√†i h√°t, ID ho·∫∑c URL.
        """

        if not search:
            embed = discord.Embed(title="", description="Nh·∫≠p v√†o t√™n b√†i h√°t ho·∫∑c URL",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)
        await ctx.trigger_typing()

        vc = ctx.voice_client

        if not vc:
            await ctx.invoke(self.connect_)

        player = self.get_player(ctx)

        # If download is False, source will be a dict which will be used later to regather the stream.
        # If download is True, source will be a discord.FFmpegPCMAudio with a VolumeTransformer.
        source = await YTDLSource.create_source(ctx, search, loop=self.bot.loop, download=False)

        await player.queue.put(source)

    @commands.command(name='pause', description="T·∫°m d·ª´ng.")
    async def pause_(self, ctx):
        """T·∫°m d·ª´ng."""

        vc = ctx.voice_client

        if not vc or not vc.is_playing():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ nh·∫°c",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)
        elif vc.is_paused():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t ƒëang t·∫°m d·ª´ng.",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        vc.pause()
        await ctx.send("T·∫°m d·ª´ng ‚è∏Ô∏è")

    @commands.command(name='resume', description="Ti·∫øp t·ª•c ph√°t nh·∫°c.")
    async def resume_(self, ctx):
        """Ti·∫øp t·ª•c ph√°t nh·∫°c."""

        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)
        elif not vc.is_paused():
            embed = discord.Embed(title="",description="Tr√¨nh ph√°t ƒëang ph√°t nh·∫°c.",
                                  color=discord.Color.green())
            return  await ctx.send(embed=embed)

        vc.resume()
        await ctx.send("Ti·∫øp t·ª•c ph√°t ‚ñ∂Ô∏è")

    @commands.command(name='skip', description="Ph√°t b√†i h√°t ti·∫øp theo trong h√†ng ƒë·ª£i.")
    async def skip_(self, ctx):
        """Ph√°t b√†i h√°t ti·∫øp theo."""

        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        if vc.is_paused():
            pass
        elif not vc.is_playing():
            return

        vc.stop()

    @commands.command(name='remove', aliases=['rm', 'rem'], description="X√≥a b√†i h√°t ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh kh·ªèi h√†ng ch·ªù.")
    async def remove_(self, ctx, pos: int = None):
        """X√≥a b√†i h√°t ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh kh·ªèi h√†ng ch·ªù."""

        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        player = self.get_player(ctx)
        if pos == None:
            player.queue._queue.pop()
        else:
            try:
                s = player.queue._queue[pos - 1]
                del player.queue._queue[pos - 1]
                embed = discord.Embed(title="",
                                      description=f"ƒê√£ x√≥a [{s['title']}]({s['webpage_url']}) [{s['requester'].mention}]",
                                      color=discord.Color.green())
                await ctx.send(embed=embed)
            except:
                embed = discord.Embed(title="", description=f'Kh√¥ng t√¨m th·∫•y nh·∫°c t·∫°i "{pos}"',
                                      color=discord.Color.green())
                await ctx.send(embed=embed)

    @commands.command(name='clear', aliases=['clr', 'cl', 'cr'], description="X√≥a to√†n b·ªô h√†ng ch·ªù.")
    async def clear_(self, ctx):
        """X√≥a to√†n b·ªô h√†ng ch·ªù."""

        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        player = self.get_player(ctx)
        player.queue._queue.clear()
        await ctx.send('üßπ **ƒê√£ x√≥a h√†ng ch·ªù**')

    @commands.command(name='queue', aliases=['q', 'playlist', 'que'], description="Hi·ªÉn th·ªã h√†ng ch·ªù.")
    async def queue_info(self, ctx):
        """Hi·ªÉn th·ªã h√†ng ch·ªù."""

        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        player = self.get_player(ctx)
        if player.queue.empty():
            embed = discord.Embed(title="", description="H√†ng ch·ªù tr·ªëng", color=discord.Color.green())
            return await ctx.send(embed=embed)

        seconds = vc.source.duration % (24 * 3600)
        hour = seconds // 3600
        seconds %= 3600
        minutes = seconds // 60
        seconds %= 60
        if hour > 0:
            duration = "%dh %02dm %02ds" % (hour, minutes, seconds)
        else:
            duration = "%02dm %02ds" % (minutes, seconds)

        # Grabs the songs in the queue...
        upcoming = list(itertools.islice(player.queue._queue, 0, int(len(player.queue._queue))))
        fmt = '\n'.join(
            f"`{(upcoming.index(_)) + 1}.` [{_['title']}]({_['webpage_url']}) | ` {duration} ` \n`Requested by: {_['requester'].display_name} `\n"
            for _ in upcoming)
        fmt = f"\n__ƒêang ph√°t__:\n[{vc.source.title}]({vc.source.web_url}) | ` {duration} `\n` Requested by: {vc.source.requester.display_name} `\n\n__Ti·∫øp theo:__\n" + fmt + f"\n**{len(upcoming)} b√†i h√°t trong h√†ng ch·ªù**"
        embed = discord.Embed(title=f'Tr√¨nh ph√°t nh·∫°c {self.bot.user.name}', description=fmt, color=discord.Color.green())


        await ctx.send(embed=embed)

    @commands.command(name='np', aliases=['song', 'current', 'currentsong', 'playing'],
                      description="Hi·ªán th√¥ng tin b√†i h√°t ƒëang ph√°t.")
    async def now_playing_(self, ctx):
        """Hi·ªán th√¥ng tin b√†i h√°t ƒëang ph√°t."""

        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        player = self.get_player(ctx)
        if not player.current:
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ nh·∫°c.",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        seconds = vc.source.duration % (24 * 3600)
        hour = seconds // 3600
        seconds %= 3600
        minutes = seconds // 60
        seconds %= 60
        if hour > 0:
            duration = "%dh %02dm %02ds" % (hour, minutes, seconds)
        else:
            duration = "%02dm %02ds" % (minutes, seconds)

        embed = discord.Embed(title="",
                              description=f"[{vc.source.title}]({vc.source.web_url})|` {duration} `",
                              color=discord.Color.green())
        embed.set_author(icon_url=self.bot.user.avatar_url, name=f"ƒêang ph√°t nh·∫°c üé∂üé∂")
        embed.set_footer(text=f'Requested by {vc.source.requester.display_name}', icon_url=vc.source.requester.avatar_url)
        await ctx.send(embed=embed)

    @commands.command(name='volume', aliases=['vol', 'v'], description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng.")
    async def change_volume(self, ctx, *, vol: float = None):
        """ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng.

        Th√¥ng s·ªë
        ------------
        <volume>: S·ªë th·ª±c ho·∫∑c s·ªë nguy√™n [b·∫Øt bu·ªôc]
            √Çm l∆∞·ª£ng tr√¨nh ph√°t s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t theo %. N·∫±m trong kho·∫£ng [1-100].
        """
        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        if not vol:
            embed = discord.Embed(title="", description=f"üîä **{vc.source.volume * 100}%**",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        if not 0 < vol < 101:
            embed = discord.Embed(title="", description="Vui l√≤ng ch·ªçn gi√° tr·ªã t·ª´ 1 ƒë·∫øn 100",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        player = self.get_player(ctx)

        if vc.source:
            vc.source.volume = vol / 100

        player.volume = vol / 100
        embed = discord.Embed(title="", description=f'**`{ctx.author}`** Thi·∫øt l·∫≠p m·ª©c √¢m l∆∞·ª£ng **{vol}%**',
                              color=discord.Color.green())
        await ctx.send(embed=embed)

    @commands.command(name='leave', aliases=["stop", "dc", "disconnect", "bye"],
                      description="Ng·ª´ng ph√°t v√† ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tho·∫°i.")
    async def leave_(self, ctx):
        """Ng·ª´ng ph√°t v√† ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tho·∫°i.

        !C·∫¢NH B√ÅO!
            ƒêi·ªÅu n√†y s·∫Ω ng·∫Øt k·∫øt n·ªëi tr√¨nh ph√°t nh·∫°c, m·ªçi c√†i ƒë·∫∑t v√† h√†ng ƒë·ª£i s·∫Ω b·ªã x√≥a.
        """
        vc = ctx.voice_client

        if not vc or not vc.is_connected():
            embed = discord.Embed(title="", description="Tr√¨nh ph√°t kh√¥ng c√≥ k·∫øt n·ªëi",
                                  color=discord.Color.green())
            return await ctx.send(embed=embed)

        if 0 == random.randint(0, 1):
            await ctx.message.add_reaction('üëã')
        await ctx.send('**Ng·∫Øt k·∫øt n·ªëi**')

        await self.cleanup(ctx.guild)


def setup(bot):
    bot.add_cog(Music(bot))






